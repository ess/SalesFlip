.contact_with_assets
  %h3.toggler.open
    = contact.full_name
    = ": #{contact.phone}" if contact.phone.present?
  .toggle
    .contact-avatar
      = image_tag contact.gravatar_url
    .info
      .heading
        %ul.actions
          %li
            = link_to t(:edit), edit_contact_path(contact, :return_to => request.fullpath), :id => "edit_#{dom_id(contact)}"
          %li
            = simple_form_for contact do |form|
              = hidden_field_tag :return_to, request.fullpath
              - if contact.tracked_by?(current_user)
                = hidden_field_tag 'contact[remove_tracker_ids][]', current_user.id
                = form.button :submit, t(:stop_updating_me), :id => 'stop_updating_me'
              - else
                = hidden_field_tag 'contact[tracker_ids][]', current_user.id
                = form.button :submit, t(:keep_me_updated), :id => 'keep_me_updated'
          %li.delete
            = simple_form_for contact, :html => { :method => :delete } do |form|
              = form.button :submit, t(:delete), :id => "delete_#{dom_id contact}"
      -#----------------------------------------------------------------------
      -# Info for Contact
      -#----------------------------------------------------------------------
      .details
        .half
          %dl
            = show_attribute(contact, 'email', mail_to(contact.email, nil, :bcc => current_user.dropbox_email))
            = show_attribute(contact, 'alt_email', mail_to(contact.alt_email, nil, :bcc => current_user.dropbox_email))
            - unless contact.do_not_call
              = show_attribute(contact, 'phone')
              = show_attribute(contact, 'mobile')
        .half
          - unless %w(linked_in facebook xing twitter).each {|x| contact.send(x).blank?}
            %dl
              %dt= t('follow')
              %dd
                = link_to('Twitter', contact.website)   if !contact.website.blank?
                = link_to('LinkedIn',contact.linked_in) if !contact.linked_in.blank?
                = link_to('Facebook',contact.facebook)  if !contact.facebook.blank?
                = link_to('Xing',    contact.xing)      if !contact.facebook.blank?
          %small.timestamp
            = raw t(:added_ago_by, :time => l(contact.created_at, :format => :short), :by => contact.user.username)
      -#----------------------------------------------------------------------
      -# Tasks for Contact
      -#----------------------------------------------------------------------
      .details
        = render :partial => 'tasks/task', :collection => contact.tasks
        - if !contact.lead_id.blank?
          = render :partial => 'tasks/task', :collection => contact.lead.tasks
        = link_to raw("<b>+</b>#{t('add_task')}"), new_task_path(:asset_id => contact.id, :asset_type => "Contact", :return_to => request.fullpath), :id => "add_task_for_#{dom_id contact}", :class => 'add_task' 
      -#----------------------------------------------------------------------
      -# Comments for Contact
      -#----------------------------------------------------------------------
      - if contact.comments.any?
        - contact.comments.sorted.each do |comment|
          = render :partial => 'comments/inline_comment', :locals => { :comment => comment }
        - if !contact.lead_id.blank?
          - contact.lead.comments.sorted.each do |comment|
            = render :partial => 'comments/inline_comment', :locals => { :comment => comment }
      .add-comment
        = simple_form_for @comment || Comment.new, :html => { :multipart => true } do |form|
          = hidden_field_tag :return_to, request.fullpath
          = form.hidden_field :commentable_type, :value => "Contact"
          = form.hidden_field :commentable_id, :value => contact.id
          = form.input :text, :as => :text, :input_html => { :rows => 2 }, :label => t('add_comment')
          .slide
            = form.simple_fields_for 'attachments_attributes[]', Attachment.new do |attachment_form|
              = attachment_form.input :attachment, :as => :file
          .submit
            = form.submit t(:save_comment)
            = t(:or)
            = link_to t(:cancel), :back
    -#
      %dl.item.contact
        %dt{ :class => contact.source.present? ? contact.source.downcase : "no-source"}
          = contact.source.present? ? contact.source : t(:no_source)
        %dd
          %strong= link_to contact.listing_name, contact, :id => contact.full_name.to_dom_id

          %small
          
            = " @ #{contact.account.name}" if contact.account
            = " | Email: #{mail_to(contact.email, nil, :bcc => current_user.dropbox_email)}" if contact.email.present?
            = " | Phone: <b>#{contact.phone}</b>" if contact.phone.present?
            = " | Mobile: <b>#{contact.mobile}</b>" if contact.mobile.present?
            %br/
            - contact_time = l(contact.created_at, :format => :short)
            %em.timestamp
              - if contact.assignee_id.present?
                = t(:assigned_ago_by, :time => contact_time, :by => contact.user.username, :for => User.find(contact.assignee_id).full_name)
              - else
                = t(:added_ago_by, :time => contact_time, :by => contact.user.username)
          %span.actions
            = link_to t(:edit), [:edit, contact], :id => "edit_#{dom_id(contact)}"
            %b.divider= "|"
            = simple_form_for contact, :html => { :method => :delete } do |form|
              = form.button :submit, t(:delete_icon), :id => "delete_#{dom_id contact}", :class=> 'delete'
    
