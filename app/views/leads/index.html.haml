- cache(leads_index_cache_key) do
  %h2.title
    Leads
    = add_new t(:add_lead), new_lead_path(:return_to => request.fullpath)

  = render :partial => 'lead', :collection => @leads
  = will_paginate @leads

- content_for :sidebar do
  - unless current_user.role_is?('Freelancer')
    .gold.box
      %h3= t(:filter_by_status)
      = form_tag '', :method => :get do
        %ul.checks.stacked
          - Lead.statuses.each do |status|
            %li
              = check_box_tag 'with_status[]', status, (params[:with_status] and params[:with_status].include?(status)), :id => "status_#{status}"
              %label{ :for => "status_#{status}" }
                = status
                %span.count= "(#{current_user.company.send("#{status.downcase.gsub(/[\s\-]/, '_')}_lead_count")})"
        %ul.checks.stacked
          %li
            = check_box_tag 'unassigned', true, params[:unassigned]
            %label{ :for => 'unassigned' }
              = t(:unassigned)
              %span.count= "(#{current_user.company.unassigned_lead_count})"
          %li
            = check_box_tag 'assigned_to', current_user.id, params[:assigned_to]
            %label{ :for => 'assigned_to' }
              = t(:assigned_to_me)
              %span.count= "(#{current_user.assigned_lead_count})"
        %ul.checks.stacked
          - Lead.sources.sort.each do |source|
            %li
              = check_box_tag 'source_is[]', source, (params[:source_is] and params[:source_is].include?(source)), :id => "source_#{source.parameterize}"
              %label{ :for => "source_#{source.parameterize}" }
                = source
                %span.count= "(#{current_user.company.send("#{source.downcase.gsub(/[\s\-]/, '_')}_lead_count")})"
        .clear= submit_tag t(:filter), :id => 'filter'
  - if can?(:export, current_user) || can?(:import, current_user)
    .gold.box
      %h3= t(:data_actions)
      %ul.plain
        - if can?(:export, current_user)
          %li= link_to t(:export_as_csv), export_leads_path(@filters), :id => 'export_as_csv'
        - if can?(:import, current_user)
          %li= link_to t(:import_from_csv), new_lead_import_path(:return_to => request.fullpath)
